<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BCLibrary</name>
    </assembly>
    <members>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.SetHeaders(System.String,System.String,System.String)">
            <summary>
            Función encargada de inicializar las cabeceras, paso obligatorio antes de usar las funciones de la biblioteca.
            </summary>
            <param name="app_id">Identificador de la aplicación</param>
            <param name="app_key">Llave de la aplicación.</param>
            <param name="data_type">Nombre del tipo de activo, permite limitar las busquedas</param>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.SetHeaders(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Función encargada de inicializar las cabeceras, paso obligatorio antes de usar las funciones de la biblioteca.
            </summary>
            <param name="app_id">Identificador de la aplicación</param>
            <param name="app_key">Llave de la aplicación.</param>
            <param name="data_type">Nombre del tipo de activo, permite limitar las busquedas</param>
            <param name="pub_key">Clave pública de la identidad</param>
            <param name="pvt_key">Clave privada de la identidad</param>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.HelloAsync">
            <summary>
            Prueba que simplemente devuelve la cadena Hello World. Se puede utilizar para comprobar que nos estamos comunicando correctamente y que la autenticación funciona.
            </summary>
            <returns>HelloResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.TimeAsync">
            <summary>
            Función para propósitos de prueba, devuelve la hora actual del API en formato UNIX Timestamp.
            También podría usarse para comprobar que el API se encuentra en la hora correcta, aunque se mantiene automáticamente sincronizado con varios relojes de alta precisión, entre ellos el del Real Instituto y Observatorio de la Armada en San Fernando(ROA).
            Otra utilidad podría ser matener sincronizados sistemas embebidos, pequeños dispositivos o aplicaciones con esta biblioteca.
            </summary>
            <returns>TimeResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.CreateAssetAsync(System.Object)">
            <summary>
            Esta función sirve para crear activos, la función espera recibir como parametro los datos que se quieren publicar en la aplicación de blockchain.
            </summary>
            <param name="data">Datos a publicar</param>
            <returns>CreateAssetResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.AppendAssetAsync(System.String,System.Object)">
            <summary>
            Esta función sirve para actualizar los metadatos de un activo.
            </summary>
            <param name="assetId">Id del activo</param>
            <param name="metada">Datos para actualizar los metados del activo</param>
            <returns>AppendAssetResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.TransferAssetAsync(System.String,System.String)">
            <summary>
            Esta función sirve para transferir un activo a otra entidad de la aplicación.
            </summary>
            <param name="assetId">Identificador del activo</param>
            /// <param name="to">Clave pública a la que se transfiere el activo</param>
            <returns>TransferAssetResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.TransferAssetAsync(System.String,System.String,System.Object)">
            <summary>
            Esta función sirve para transferir un activo a otra entidad de la aplicación y en la misma operación añadir metadata.
            En realidad, y para que se entienda el concepto, toda actualización es una transferencia, y esta puede ser hecha a la misma identidad(sólo modificación), o a otra(modificación y traspaso).
            </summary>
            <param name="assetId">Identificador del activo</param>
            <param name="to">Cadena, clave pública a la que se transfiere el activo</param>
            <param name="metada">Datos para actualizar los metados del activo</param>
            <returns>TransferAssetResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.BurnAssetAsync(System.String)">
            <summary>
            Esta función sirve para quemar activos.
            Al quemar un objeto el API lo transfiere a una identidad especial, que se generó al crear la cadena de bloques, y de la que no se dispone de llave privada.Es decir, para esta identidad resulta imposible realizar cualquier operación.
            Concluimos entonces que cualquier objeto quemado será inalterable e intransferible para siempre.
            </summary>
            <param name="assetId">Identificador del activo</param>
            <returns>BurnAssetResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.GenerateIdentityAsync(System.String,System.String)">
            <summary>
            Esta función permite generar una identidad para usarla con nuestra aplicación. Tenga en cuenta que la nueva identidad no es guardada y  es usted quien debe custodiar el par de claves devuelto o bien el seed y el pin utilizados para generarla.
            Cualquier objeto en propiedad de una identidad no puede ser transferido o actualizado si no se es capaz de firmar la operación con su par de claves.
            </summary>
            <param name="seed">La semilla es cualquier cadena de texto. Se recomienda superior a 16 caracteres. Se admite longitud entre 6 y 256 caracteres alfanuméricos, incluyendo espacios y signos de puntuación.</param>
            <param name="pin">El PIN es una cadena más corta y memorizable. Recomendado entre 4 y 8 caracteres, se admiten entre 4 y 16 caracteres, sólo letras y números (a-z,A-Z,0-9).</param>
            <returns>GenerateIdentityResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetAsync(System.String)">
            <summary>
            Esta función permite consultar los activos y tokens de la aplicación.
            </summary>
            <param name="assetId">Identificador del activo a consultar</param>
            <returns>RetrieveAssetResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrievePublicAssetAsync(System.String,Xpander.Shared.ThirdParty.BCLibrary.BC_NETWORK)">
            <summary>
            Esta función permite consultar un activo de forma pública. No es necesario enviar las cabeceras de identificación de aplicación.
            </summary>
            <param name="assetId">Identificador del activo</param>
            <param name="network">Red donde se aloja la aplicación (main o test)</param>
            <returns>RetrieveAssetResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetriveAssetHistoryAsync(System.String)">
            <summary>
            Solicita el historial de un activo. Esto incluye todas las operaciones realizadas con dicho activo, desde su creación, incluyendo transferencias, actualizaciones y quemado.
            </summary>
            <param name="assetId">Identificador del activo</param>
            <returns>RetrieveAssetHistoryResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetsResponsesAsync">
            <summary>
            Recupera todos los activos de la aplicación. Usar con moderación.
            </summary>
            <returns>RetrieveAssetsResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetsResponsesAsync(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Recupera todos los assets de la aplicación indicando valores de paginación y ordenamiento. Función recomendada para recuperar los assets.
            </summary>
            <param name="page_num">Número de página</param>
            <param name="per_page">Registros por página</param>
            <param name="inverse">Ordenamiento inverso, true/false</param>
            <returns>RetrieveAssetsResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetsResponsesAsync(System.String)">
            <summary>
            Recupera todos los assets de la aplicación por tipo de activo. Campo data.type del activo.
            </summary>
            <param name="type">Valor buscado en data.type</param>
            <returns>RetrieveAssetsResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetsResponsesAsync(System.String,System.String)">
            <summary>
            Recupera todos los activos de la aplicación por tipo de activo y propietario indicado. Campo data.type y data.from del activo.
            </summary>
            <param name="type">Valor buscado en data.type</param>
            /// <param name="from">Clave pública del propietario del activo. data.from</param>
            <returns>RetrieveAssetsResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetsResponsesByQueryObjectAsync(System.Object)">
            <summary>
            Recupera los activos de la aplicación que cumplan con los valores de las propiedades indicadas.
            </summary>
            <param name="properties">Propiedades y valores a buscar en data.bc_data</param>
            <returns>RetrieveAssetsResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetsResponsesByQueryStringAsync(System.String)">
            <summary>
            Recupera los activos de la aplicación que cumplan con los valores de las propiedades indicadas.
            </summary>
            <param name="properties">>Propiedades y valores a buscar en data.bc_data</param>
            <returns>RetrieveAssetsResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetsResponsesByQueryObjectAsync(System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Recupera los activos de la aplicación que cumplan con los valores de las propiedades indicadas. Se añade paginación y ordenamiento.
            </summary>
            <param name="properties">Propiedades y valores a buscar en data.bc_data</param>
            <param name="page_num">Número de página</param>
            <param name="per_page">Registros por página</param>
            <param name="inverse">Ordenamiento inverso, true/false</param>
            <returns>RetrieveAssetsResponse</returns>
        </member>
        <member name="M:Xpander.Shared.ThirdParty.BCLibrary.Processor.RetrieveAssetsResponsesByQueryStringAsync(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Recupera los activos de la aplicación que cumplan con los valores de las propiedades indicadas. Se añade paginación y ordenamiento.
            </summary>
            <param name="properties">String con las propiedades y a buscar en bc_data</param>
            <param name="page_num">Número de página</param>
            <param name="per_page">Registros por página</param>
            <param name="inverse">Ordenamiento inverso, true/false</param>
            <returns>RetrieveAssetsResponse</returns>
        </member>
    </members>
</doc>

// <auto-generated />
using System;
using Alize.Platform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Alize.Platform.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220505232952_SeedModules")]
    partial class SeedModules
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Alize.Platform.Data.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cif")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("City")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GoogleMapsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTypeMime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Province")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Web")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Zip")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("554bc4f7-46a9-4a87-a52e-6ca79e24986c"),
                            Address = "C\\Gregal, 2",
                            BusinessName = "KH Xpander",
                            Cif = "B02658383",
                            City = "Almussafes",
                            ContactName = "Javier Belarte",
                            Country = "España",
                            Description = "Spin off tecnológica del grupo KH",
                            Email = "sistemas@grupokh.com",
                            GoogleMapsUrl = "",
                            IsActive = true,
                            Language = "Español",
                            Name = "Xpander",
                            PhoneNumber = "961783551",
                            Province = "Valencia",
                            Web = "http://www.khxpander.com",
                            Zip = "46440"
                        },
                        new
                        {
                            Id = new Guid("e8528a43-2a9d-44dd-b1c9-e37777ad0644"),
                            Address = "C\\Gregal, 2",
                            BusinessName = "",
                            Cif = "B96796644",
                            City = "Almussafes",
                            ContactName = "Javier Gonzalez",
                            Country = "España",
                            Description = "Empresa especializada en diseñar, desarrollar y producir componentes y servicios para la industria de la automoción",
                            Email = "sistemas@grupokh.com",
                            GoogleMapsUrl = "",
                            IsActive = true,
                            Language = "Español",
                            Name = "KH Vives",
                            PhoneNumber = "961783551",
                            Province = "Valencia",
                            Web = "https://www.grupokh.com",
                            Zip = "46440"
                        },
                        new
                        {
                            Id = new Guid("2f3e3858-4a59-4f0a-a54f-1830e47a9dfe"),
                            Address = "Calle de Gustavo Eiffel 3",
                            BusinessName = "",
                            Cif = "B97929566",
                            City = "Paterna",
                            ContactName = "Comercial nunsys",
                            Country = "España",
                            Description = "Nunsys es una empresa especializada en la implantación de soluciones integrales de tecnología",
                            Email = "contacto@nunsys.com",
                            GoogleMapsUrl = "",
                            IsActive = true,
                            Language = "Español",
                            Name = "Nunsys",
                            PhoneNumber = "960500631",
                            Province = "Valencia",
                            Web = "https://www.nunsys.com",
                            Zip = "46980"
                        },
                        new
                        {
                            Id = new Guid("f20a5162-ebe9-48d0-92ae-d3cca917fc43"),
                            Address = "",
                            BusinessName = "",
                            Cif = "",
                            City = "",
                            ContactName = "",
                            Country = "",
                            Description = "Comercio al por mayor de frutas y frutos, verduras frescas y hortalizas",
                            Email = "",
                            GoogleMapsUrl = "",
                            IsActive = true,
                            Language = "Español",
                            Name = "Patatas Lázaro",
                            PhoneNumber = "",
                            Province = "",
                            Web = "",
                            Zip = ""
                        });
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModuleGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModuleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8befaf9-807a-4f7d-aad2-9380f79bc364"),
                            Description = "",
                            ModuleGroup = "Administración",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Aplicaciones"
                        },
                        new
                        {
                            Id = new Guid("4112d229-b379-447e-bf37-fb57dd19d5d8"),
                            Description = "",
                            ModuleGroup = "Administración",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Empresas"
                        },
                        new
                        {
                            Id = new Guid("9141e022-2833-4a18-a7b9-7f20a6b39768"),
                            Description = "",
                            ModuleGroup = "Administración",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Grupos"
                        },
                        new
                        {
                            Id = new Guid("87da1e2c-f36e-4490-bfc8-e75fff9b5510"),
                            Description = "",
                            ModuleGroup = "Administración",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Módulos"
                        },
                        new
                        {
                            Id = new Guid("31932e4d-00cd-46b2-afb1-a9e9a1464bd8"),
                            Description = "",
                            ModuleGroup = "Administración",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Usuarios"
                        },
                        new
                        {
                            Id = new Guid("1254e6da-49d4-4ba5-9cd4-cff7c10f9304"),
                            Description = "",
                            ModuleGroup = "Management",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Alertas"
                        },
                        new
                        {
                            Id = new Guid("da12c25e-ea5c-4867-a0c4-e82746010507"),
                            Description = "",
                            ModuleGroup = "Management",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Consultas"
                        },
                        new
                        {
                            Id = new Guid("ab9d236a-0ee4-4b10-b445-96af2db9188e"),
                            Description = "",
                            ModuleGroup = "Management",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Panel de control"
                        },
                        new
                        {
                            Id = new Guid("57ca62f5-a0ec-4dbd-9e06-cc2904ac944e"),
                            Description = "",
                            ModuleGroup = "Informes",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Auditoría usuarios"
                        },
                        new
                        {
                            Id = new Guid("0c75b5f5-f868-43b0-9af0-c45442d9479e"),
                            Description = "",
                            ModuleGroup = "Informes",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Registro transacciones"
                        },
                        new
                        {
                            Id = new Guid("ae49dbc2-e899-4003-9ea8-0e0471f638d6"),
                            Description = "",
                            ModuleGroup = "Ayuda",
                            ModuleTypeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Ayuda"
                        });
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210"),
                            ConcurrencyStamp = "c7160f18-e6f6-4562-9277-ba931da32512",
                            Description = "Los administradores pro tienen acceso completo y sin restricciones a la plataforma",
                            IsActive = true,
                            Name = "Administrador Pro",
                            NormalizedName = "ADMINISTRADOR PRO"
                        },
                        new
                        {
                            Id = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            ConcurrencyStamp = "31817712-4496-4cc0-84ae-9412ae473b7b",
                            Description = "Los distribuidores tienen acceso completo y sin restricciones en su empresa y empresas clientes que haya dado de alta",
                            IsActive = true,
                            Name = "Distribuidor",
                            NormalizedName = "DISTRIBUIDOR"
                        },
                        new
                        {
                            Id = new Guid("caddad05-120f-48a8-b659-ff4528e5df97"),
                            ConcurrencyStamp = "bfab4c27-ee90-4645-9399-37a2da03a702",
                            Description = "Los administradores tienen acceso completo y sin restricciones dentro de su empresa",
                            IsActive = true,
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = new Guid("33dde250-ddde-42db-a4b9-5a2355082391"),
                            ConcurrencyStamp = "44e37170-69f0-4f9c-81ca-51a50bace591",
                            Description = "Los usuarios pueden acceder a la mayoria de opciones de la plataforma y no pueden hacer cambios accidentales o intencionados",
                            IsActive = true,
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        },
                        new
                        {
                            Id = new Guid("33dde740-ddde-42db-a4b9-5a2355082391"),
                            ConcurrencyStamp = "25fdf193-2cc3-483f-a1a5-2f43fa77ba8d",
                            Description = "Los invitados tienen el acceso limitado a las consultas que se le han asignado",
                            IsActive = true,
                            Name = "Invitado",
                            NormalizedName = "INVITADO"
                        });
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Pin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("95ada776-f3e1-42db-aa39-382f91b74cd4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d47940d9-c44d-4a43-b422-c702c66c4849",
                            Email = "test@user.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            IsActive = true,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@USER.COM",
                            NormalizedUserName = "TESTUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDKNhiDb69oPOyR7TE0a7Z67bq8fyGjN/EBTjKS3Nyk3FdfrOJMKGI3A/Yexvi0+Yg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "testuser"
                        },
                        new
                        {
                            Id = new Guid("1c822965-eb67-4092-9cf7-cf62806d5395"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8521ea73-98d1-4ba7-a220-775602465627",
                            Email = "test@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            IsActive = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@ADMIN.COM",
                            NormalizedUserName = "TESTADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENPmUD6FwbFIVxG3cALhigCDdyQR4Tpn05BmGWJReqOyg4AXoVrfvfamD0Isrh77tw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "testadmin"
                        });
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1c822965-eb67-4092-9cf7-cf62806d5395"),
                            RoleId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            UserId = new Guid("95ada776-f3e1-42db-aa39-382f91b74cd4"),
                            RoleId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModuleRole", b =>
                {
                    b.Property<Guid>("ModulesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ModulesId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ModuleRole");

                    b.HasData(
                        new
                        {
                            ModulesId = new Guid("a8befaf9-807a-4f7d-aad2-9380f79bc364"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("4112d229-b379-447e-bf37-fb57dd19d5d8"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("9141e022-2833-4a18-a7b9-7f20a6b39768"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("87da1e2c-f36e-4490-bfc8-e75fff9b5510"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("31932e4d-00cd-46b2-afb1-a9e9a1464bd8"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("1254e6da-49d4-4ba5-9cd4-cff7c10f9304"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("da12c25e-ea5c-4867-a0c4-e82746010507"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("ab9d236a-0ee4-4b10-b445-96af2db9188e"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("57ca62f5-a0ec-4dbd-9e06-cc2904ac944e"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("0c75b5f5-f868-43b0-9af0-c45442d9479e"),
                            RolesId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        },
                        new
                        {
                            ModulesId = new Guid("a8befaf9-807a-4f7d-aad2-9380f79bc364"),
                            RolesId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            ModulesId = new Guid("4112d229-b379-447e-bf37-fb57dd19d5d8"),
                            RolesId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            ModulesId = new Guid("9141e022-2833-4a18-a7b9-7f20a6b39768"),
                            RolesId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            ModulesId = new Guid("87da1e2c-f36e-4490-bfc8-e75fff9b5510"),
                            RolesId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            ModulesId = new Guid("31932e4d-00cd-46b2-afb1-a9e9a1464bd8"),
                            RolesId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            ModulesId = new Guid("da12c25e-ea5c-4867-a0c4-e82746010507"),
                            RolesId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9")
                        },
                        new
                        {
                            ModulesId = new Guid("a8befaf9-807a-4f7d-aad2-9380f79bc364"),
                            RolesId = new Guid("caddad05-120f-48a8-b659-ff4528e5df97")
                        },
                        new
                        {
                            ModulesId = new Guid("4112d229-b379-447e-bf37-fb57dd19d5d8"),
                            RolesId = new Guid("caddad05-120f-48a8-b659-ff4528e5df97")
                        },
                        new
                        {
                            ModulesId = new Guid("9141e022-2833-4a18-a7b9-7f20a6b39768"),
                            RolesId = new Guid("caddad05-120f-48a8-b659-ff4528e5df97")
                        },
                        new
                        {
                            ModulesId = new Guid("87da1e2c-f36e-4490-bfc8-e75fff9b5510"),
                            RolesId = new Guid("caddad05-120f-48a8-b659-ff4528e5df97")
                        },
                        new
                        {
                            ModulesId = new Guid("31932e4d-00cd-46b2-afb1-a9e9a1464bd8"),
                            RolesId = new Guid("caddad05-120f-48a8-b659-ff4528e5df97")
                        },
                        new
                        {
                            ModulesId = new Guid("da12c25e-ea5c-4867-a0c4-e82746010507"),
                            RolesId = new Guid("caddad05-120f-48a8-b659-ff4528e5df97")
                        },
                        new
                        {
                            ModulesId = new Guid("da12c25e-ea5c-4867-a0c4-e82746010507"),
                            RolesId = new Guid("33dde250-ddde-42db-a4b9-5a2355082391")
                        },
                        new
                        {
                            ModulesId = new Guid("da12c25e-ea5c-4867-a0c4-e82746010507"),
                            RolesId = new Guid("33dde740-ddde-42db-a4b9-5a2355082391")
                        });
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.Application", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.Company", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.Company", "ParentCompany")
                        .WithMany()
                        .HasForeignKey("ParentCompanyId");

                    b.Navigation("ParentCompany");
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.Role", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.User", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUser_Applications_ApplicationId");

                    b.HasOne("Alize.Platform.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUser_AspNetUsers_UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alize.Platform.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModuleRole", b =>
                {
                    b.HasOne("Alize.Platform.Data.Models.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alize.Platform.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Alize.Platform.Data.Models.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
